


buildscript {
    repositories{
        jcenter()
    }
    dependencies{
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id "com.google.protobuf" version "0.8.15"
    id 'java'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

repositories {
    mavenCentral()
}

dependencies {

    testCompile group: 'junit', name: 'junit', version: '4.12'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    //This two are necesary to read the proto file and generate the classes from it
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.15.5'

    implementation group: 'io.grpc', name: 'grpc-all', version: '1.35.0'

    //Those are necesary to work with the DB
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.8.0'
    runtime group: 'mysql', name: 'mysql-connector-java', version: '8.0.19'

    compile group: 'de.mirkosertic.bytecoder', name: 'java.base', version: '2020-02-29'

}
//Here we explain where to put and find the generated classes
sourceSets{
    main{
        java{
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {

    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.15.5'
    }
    plugins {

        grpc{
            artifact = 'io.grpc:protoc-gen-grpc-java:1.35.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

}

jar {
    manifest {
        attributes(
                'Main-Class': 'Servidor'
        )
    }
}
//This is needed to generate an executable jar
task customFatJar(type: Jar){
    manifest{
        attributes 'Main-Class':'Servidor'
    }
    baseName='ejecutable'
    from{
        configurations.compile.collect{
            it.isDirectory()? it: zipTree(it)
        }
    }
}
