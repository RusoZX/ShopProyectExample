package shopServer.Services;

import com.google.protobuf.ByteString;
import generated.General;
import generated.serviceProductsGrpc;
import io.grpc.stub.StreamObserver;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;

//First we create a class that extends the one generated by the proto file
public class GetProductsService extends serviceProductsGrpc.serviceProductsImplBase{
    //We create the object that is gonna work with the data base
    DataBase db = new DataBase();

    @Override
    public void giveResponseProducts(General.ClientPetitionProducts request,
                                    StreamObserver<General.ServerResponseProducts> responseObserver){
        System.out.println("<------------------------GET PRODUCTS SERVICE------------------------------------------->");
        General.ServerResponseProducts response;
        try{
            ArrayList<ArrayList<Object>> result= new ArrayList<ArrayList<Object>>();
            //First we display in the log all the data received from the client
            System.out.println("Searching data:\n"+request.getSortingMode()+", "+ request.getQuantity());
            switch (request.getSortingMode()){
                case NAME_ASC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by name ASC limit "+request.getQuantity());
                    break;
                case NAME_DESC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by name DESC limit "+request.getQuantity());
                    break;
                case PRICE_ASC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by price ASC limit "+request.getQuantity());
                    break;
                case PRICE_DESC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by price DESC limit "+request.getQuantity());
                    break;
                case SELLS_ASC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by unitsSold ASC limit "+request.getQuantity());
                    break;
                case SELLS_DESC:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product order by unitsSold DESC limit "+request.getQuantity());
                    break;
                case BY_NAME:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product where name like '%"+request.getSearch()+"%' limit "
                            +request.getQuantity());
                    break;
                case BY_CATEGORY:
                    result = db.consult("Select idProduct, owner, name, price, unitsInExistence, unitsSold, sale," +
                            " imagePath, category from product where category like '"+request.getSearch()+"' limit "
                            +request.getQuantity());
            }
            //Now we show the result of the consult
            System.out.println("Results: \n"+result.toString());
            //Now we create an array list in wich we converse the result to the generated objects
            ArrayList<General.Product> products = new ArrayList<General.Product>();
            for(int i =0;i < result.size(); i++){
                System.out.println(result.get(i).get(7).toString());
                File photo = new File(result.get(i).get(7).toString());

                BufferedImage image= ImageIO.read(photo);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(image,"jpg",baos);
                byte[] byteArray = baos.toByteArray();
                //Now we if the product is liked by the user
                ArrayList<ArrayList<Object>> like = db.consult("Select * from likes where idUser = '"+
                        request.getIdUser()+"' and idProduct = '"+
                        Integer.parseInt(result.get(i).get(0).toString())+"'");
                System.out.println("Like:"+like+"\nSelect * from likes where idUser = '"+
                        request.getIdUser()+"' and idProduct = '"+
                        Integer.parseInt(result.get(i).get(0).toString())+"'");
                products.add(General.Product.newBuilder()
                        .setId(Integer.parseInt(result.get(i).get(0).toString()))
                        .setOwner(Integer.parseInt(result.get(i).get(1).toString()))
                        .setName(result.get(i).get(2).toString())
                        .setPrice(Float.parseFloat(result.get(i).get(3).toString()))
                        .setUnitsInExistence(Integer.parseInt(result.get(i).get(4).toString()))
                        .setUnitsSold(Integer.parseInt(result.get(i).get(5).toString()))
                        .setSale(Integer.parseInt(result.get(i).get(6).toString()))
                        .setFormat(General.Product.Format.JPG)
                        .setImage(ByteString.copyFrom(byteArray))
                        .setCategory(result.get(i).get(8).toString())
                        .setLiked(!like.isEmpty())
                .build());
            }
            if(!result.isEmpty()) {
                response = General.ServerResponseProducts.newBuilder()
                        .setStatusCode(General.ServerResponseProducts.StatusCode.OK)
                        .addAllProducts(products)
                        .build();
                responseObserver.onNext(response);
                responseObserver.onCompleted();
            }else{
                response = General.ServerResponseProducts.newBuilder()
                        .setStatusCode(General.ServerResponseProducts.StatusCode.EMPTY)
                        .build();
                responseObserver.onNext(response);
                responseObserver.onCompleted();
            }
        }catch(Exception e){
            System.out.println("/////////////////////////////////GET PRODUCTS ERROR/////////////////////////////////\n"+
                    e.getLocalizedMessage());
            //As there was some kind of error we create a response with and Status Code explaining to the Client that
            //there was an error in the server
            response = General.ServerResponseProducts.newBuilder()
                    .setStatusCode(General.ServerResponseProducts.StatusCode.SERVER_ERROR)
                    .build();
            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }
    }
}
