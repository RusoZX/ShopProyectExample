package shopServer.Services;

import generated.General;
import generated.serviceRestocksGrpc;
import io.grpc.stub.StreamObserver;

import java.util.ArrayList;

//First we create a class that extends the one generated by the proto file
public class GetRestocksService extends serviceRestocksGrpc.serviceRestocksImplBase{
    //We create the object that is gonna work with the data base
    DataBase db = new DataBase();

    @Override
    public void giveResponseRestocks(General.ClientPetitionRestocks request,
                                    StreamObserver<General.ServerResponseRestocks> responseObserver) {
        System.out.println("<------------------------GET RESTOCKS REQUEST----------------------------->");
        General.ServerResponseRestocks response;
        try{
            ArrayList<ArrayList<Object>> result;
            //First we display in the log all the data received from the client
            System.out.println("Searching data:\n"+request.getIdProduct()+", "+request.getIdUser()+", "+
                    request.getQuantity()+", "+request.getFirstDay()+", "+request.getLastDay());
            //Now we revise the id of the product, if it is -1 it means that the clients wants to see all the restocks
            if(request.getIdProduct() == -1){
                result= db.consult("Select r.idProduct, r.quantity, r.date, p.name, p.imagePath from restock" +
                        " as r inner join product as p on r.idProduct = p.idProduct where r.idUser = '"
                        +request.getIdUser()+ "' and r.date between '"+request.getFirstDay()+
                        "' and '"+request.getLastDay() +"' limit "+request.getQuantity()+";");
            }else{
                result= db.consult("Select r.idProduct, r.quantity, r.date, p.name, p.imagePath from restock as"
                        +" r inner join product as p on s.idProduct = p.idProduct "+
                        "where idProduct = '"+request.getIdProduct() + "' and idUser = '"+request.getIdUser()
                        +"' and date between '"+request.getFirstDay()+ "' and '"+request.getLastDay()
                        +"' limit "+request.getQuantity()+";");
            }
            ArrayList<General.Restock> restocks = new ArrayList<General.Restock>();
            for(int i =0; i < result.size();i++){
                restocks.add(General.Restock.newBuilder()
                        .setIdOwner(request.getIdUser())
                        .setIdProduct(Integer.parseInt(result.get(i).get(0).toString()))
                        .setQuantity(Integer.parseInt(result.get(i).get(1).toString()))
                        .setDate(result.get(i).get(2).toString())
                        .setName(result.get(i).get(3).toString())
                        .setImagePath(result.get(i).get(4).toString())
                        .build());
            }
            response = General.ServerResponseRestocks.newBuilder()
                    .setStatusCode(General.ServerResponseRestocks.StatusCode.OK)
                    .addAllRestocks(restocks)
                    .build();
            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }catch(Exception e){
            System.out.println("/////////////////////////////////GET RESTOCKS ERROR/////////////////////////////////\n"+
                    e.getLocalizedMessage());
            //As there was some kind of error we create a response with and Status Code explaining to the Client that
            //there was an error in the server
            response = General.ServerResponseRestocks.newBuilder()
                    .setStatusCode(General.ServerResponseRestocks.StatusCode.SERVER_ERROR)
                    .build();
            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }


    }

}
